USER:
    Check Auth:
        Method:GET
        URL: http://localhost:3000/users/auth
        Return:{
            name:
            email:
        }

    Register:
        Method:POST
        URL : http://localhost:3000/auth/register
        Body : {
            #required feilds
            name:
            email: (unique)
            password:
            api_type: one of this values [website, facebook, google]

            #social media feilds
            api_token:
            profile_id:
        }
        Return : 
        {
            "message": "success"
        }

    Login:
        Method:POST
        URL : http://localhost:3000/auth/login
        Body: {
            email : {Registered email}
            password: {true password}
        }
        Return:{
        "access_token": ex: "eyJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJleHAiOjE1MjMzMDQ3ODJ9.DPLP6vJN413_igUPEaIbWLzt2CpHg9OjC6_jeGvvZWo",
        "message": "success"
        }


GROUP:
    Add Group:
        Method:POST
        URL:http://localhost:3000/groups/
        Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
        }
        Body:{
                {
                    "group":{
                        "groupName":{group name ex:"IOT"}
                    }
                }
        }
        Return:{
            group object created
            ex:{
                "id": 4,
                "groupName": "IOT",
                "created_at": "2018-04-09T18:05:41.000Z",
                "updated_at": "2018-04-09T18:05:41.000Z",
                "owner_id": 1
            }
        }

    Add Friends to Group:
        Method:POST
        URL:http://localhost:3000/groups/add

        Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
        }
        Body:{
                {
                    "group":{
                
                        "group_id":1,
                        "user_id":11
                    }
                }
        }
        Return:{
            object of GroupDetail (group_member) 
            ex:
            {
                "id": 8,
                "created_at": "2018-04-09T18:16:36.000Z",
                "updated_at": "2018-04-09T18:16:36.000Z",
                "user_id": 11,
                "group_id": 1
            }

            OR:
            {message:"unauthorized"} if group doesn't belong to user
        }

    List Groups:
        Method:GET
        URL: http://localhost:3000/groups/
        Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
        }
        Return:{
            array of Groups belongs to authenticated user 
        }

    List Group Members:
        Method:GET
        URL: http://localhost:3000/groups/members?group_id=1
        Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
        }
        Return:{
            array of GroupDetail (group_members) 
            OR {message:"unauthorized"} if group doesn't belong to user

        }

    Delete Group:
        Method: DELETE 
        URL:http://localhost:3000/groups/{id}
        Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
        }
        Return:{
            {message:"success"}
            or {message:"unauthorized"} if group doesn't belong to user
        }

FRIEND:
    List My Friends:
    Method:GET
    URL: http://localhost:3000/friends
    Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
    }
    Return:{
        array of user friends
    }

    Search for user:
        Method:POST
        URL: http://localhost:3000/users/search
        Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
        }
        Body:{
            email:
        }
        Return:{
            object of user or {"message": "user not found"}
        }
    
    Add Friend:
    Method:POST
    URL:http://localhost:3000/friends
    Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
    }
    Body:{
        {
 
            "friend":
                {
                    "friend_id":5
                }
        }
    }
    Return:{
        {message:"success"}
    }
DELETE Friend:
    Method:DELETE
    URL:http://localhost:3000/friends/{id}
    Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
    }
    Return:{
        {message:"success"}
    }

    
Delete friend from group:
Method:post
    URL:http://localhost:3000/groups/remove
    Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
    }
    Body:{
        {
            "group":{
                "group_id":4,
                "user_id":2
            }
        }
    }
    Return:{
        {message:"success"}
    }

Orders:
    Method: POST
    URL:http://localhost:3000/orders
    Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
    }
    Body:{
        {
            "order":{
                "meal_name":"dinner",
                "image":"dddd",
                "restaurant_name":"Mac"
            },
            "users":
                [
                    {"user_id":9},
                    {"user_id":2}
                ]
            
        }
    }
    Return:{
       [
            {
                "order": {
                    "id": 129,
                    "user_id": 1,
                    "meal_name": "dinner",
                    "image": "33",
                    "created_at": "2018-04-10T12:29:50.000Z",
                    "updated_at": "2018-04-10T12:29:50.000Z",
                    "restaurant_name": "sob7y",
                    "status": "waiting"
                },
                "invited_friends": []
            }
]
    }

GET USER ORDERS :
    Method: GET
    URL:http://localhost:3000/orders
    Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
    }
   
    Return:{
       [
    [
        {
            "id": 72,
            "user_id": 1,
            "meal_name": "beakfast",
            "image": "333",
            "created_at": "2018-04-09T00:55:50.000Z",
            "updated_at": "2018-04-09T00:55:50.000Z",
            "restaurant_name": "mac",
            "status": "waiting"
        },
        {
            "id": 73,
            "user_id": 1,
            "meal_name": "beakfast",
            "image": "333",
            "created_at": "2018-04-09T00:56:20.000Z",
            "updated_at": "2018-04-09T00:56:20.000Z",
            "restaurant_name": "mac",
            "status": "waiting"
        },
        {
            "id": 74,
            "user_id": 1,
            "meal_name": "beakfast",
            "image": "333",
            "created_at": "2018-04-09T00:58:09.000Z",
            "updated_at": "2018-04-09T00:58:09.000Z",
            "restaurant_name": "mac",
            "status": "waiting"
        }
      
    ],
    {
        "joined": [
            0,
            0,
            0
        ],
        "invited": [
            1,
            1,
            1
        ]
    }
]
    }

Change Order Status [finished,canceled]:
    Method:POST
    URL:http://localhost:3000/orders/change_status
    Headers:{
            Content-Type:application/json
            Authorization: Barear {access_token which returned from login}
    }
    Body:{
        {
            "order_id":133,
            "status":"w"
        }
    }
    Return:{
        {array of user orders}
    }
    
Get order details:
    Method:GET
    
